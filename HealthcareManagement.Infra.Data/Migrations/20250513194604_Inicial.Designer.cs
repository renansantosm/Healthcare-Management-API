// <auto-generated />
using System;
using HealthcareManagement.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthcareManagement.Infra.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250513194604_Inicial")]
    partial class Inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthcareManagement.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HealthcareManagement.Domain.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HealthcareManagement.Domain.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HealthcareManagement.Domain.Entities.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("HealthcareManagement.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("HealthcareManagement.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthcareManagement.Domain.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("HealthcareManagement.Domain.ValueObjects.AppointmentDate", "AppointmentDate", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("Date")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("AppointmentDate");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");
                        });

                    b.Navigation("AppointmentDate")
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthcareManagement.Domain.Entities.Doctor", b =>
                {
                    b.OwnsOne("HealthcareManagement.Domain.ValueObjects.PersonInfo", "PersonInfo", b1 =>
                        {
                            b1.Property<Guid>("DoctorId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("DoctorId");

                            b1.ToTable("Doctors");

                            b1.WithOwner()
                                .HasForeignKey("DoctorId");

                            b1.OwnsOne("HealthcareManagement.Domain.ValueObjects.BirthDate", "BirthDate", b2 =>
                                {
                                    b2.Property<Guid>("PersonInfoDoctorId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<DateOnly>("Date")
                                        .HasColumnType("date")
                                        .HasColumnName("BirthDate");

                                    b2.HasKey("PersonInfoDoctorId");

                                    b2.ToTable("Doctors");

                                    b2.WithOwner()
                                        .HasForeignKey("PersonInfoDoctorId");
                                });

                            b1.OwnsOne("HealthcareManagement.Domain.ValueObjects.Cpf", "Cpf", b2 =>
                                {
                                    b2.Property<Guid>("PersonInfoDoctorId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Number")
                                        .IsRequired()
                                        .HasMaxLength(11)
                                        .HasColumnType("nvarchar(11)")
                                        .HasColumnName("Cpf");

                                    b2.HasKey("PersonInfoDoctorId");

                                    b2.HasIndex("Number")
                                        .IsUnique()
                                        .HasDatabaseName("IX_Doctor_Cpf");

                                    b2.ToTable("Doctors");

                                    b2.WithOwner()
                                        .HasForeignKey("PersonInfoDoctorId");
                                });

                            b1.OwnsOne("HealthcareManagement.Domain.ValueObjects.Email", "Email", b2 =>
                                {
                                    b2.Property<Guid>("PersonInfoDoctorId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Adress")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)")
                                        .HasColumnName("Email");

                                    b2.HasKey("PersonInfoDoctorId");

                                    b2.HasIndex("Adress")
                                        .IsUnique()
                                        .HasDatabaseName("IX_Doctor_Email");

                                    b2.ToTable("Doctors");

                                    b2.WithOwner()
                                        .HasForeignKey("PersonInfoDoctorId");
                                });

                            b1.OwnsOne("HealthcareManagement.Domain.ValueObjects.FullName", "FullName", b2 =>
                                {
                                    b2.Property<Guid>("PersonInfoDoctorId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("FirstName")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)")
                                        .HasColumnName("FirstName");

                                    b2.Property<string>("LastName")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)")
                                        .HasColumnName("LastName");

                                    b2.HasKey("PersonInfoDoctorId");

                                    b2.ToTable("Doctors");

                                    b2.WithOwner()
                                        .HasForeignKey("PersonInfoDoctorId");
                                });

                            b1.OwnsOne("HealthcareManagement.Domain.ValueObjects.MobilePhoneNumber", "MobilePhoneNumber", b2 =>
                                {
                                    b2.Property<Guid>("PersonInfoDoctorId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Number")
                                        .IsRequired()
                                        .HasMaxLength(11)
                                        .HasColumnType("nvarchar(11)")
                                        .HasColumnName("Phone");

                                    b2.HasKey("PersonInfoDoctorId");

                                    b2.ToTable("Doctors");

                                    b2.WithOwner()
                                        .HasForeignKey("PersonInfoDoctorId");
                                });

                            b1.Navigation("BirthDate")
                                .IsRequired();

                            b1.Navigation("Cpf")
                                .IsRequired();

                            b1.Navigation("Email")
                                .IsRequired();

                            b1.Navigation("FullName")
                                .IsRequired();

                            b1.Navigation("MobilePhoneNumber")
                                .IsRequired();
                        });

                    b.OwnsMany("HealthcareManagement.Domain.ValueObjects.Specialty", "Specialties", b1 =>
                        {
                            b1.Property<Guid>("DoctorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Specialty");

                            b1.HasKey("DoctorId", "Id");

                            b1.ToTable("Specialty");

                            b1.WithOwner()
                                .HasForeignKey("DoctorId");
                        });

                    b.Navigation("PersonInfo")
                        .IsRequired();

                    b.Navigation("Specialties");
                });

            modelBuilder.Entity("HealthcareManagement.Domain.Entities.Patient", b =>
                {
                    b.OwnsOne("HealthcareManagement.Domain.ValueObjects.PersonInfo", "PersonInfo", b1 =>
                        {
                            b1.Property<Guid>("PatientId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");

                            b1.OwnsOne("HealthcareManagement.Domain.ValueObjects.BirthDate", "BirthDate", b2 =>
                                {
                                    b2.Property<Guid>("PersonInfoPatientId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<DateOnly>("Date")
                                        .HasColumnType("date")
                                        .HasColumnName("BirthDate");

                                    b2.HasKey("PersonInfoPatientId");

                                    b2.ToTable("Patients");

                                    b2.WithOwner()
                                        .HasForeignKey("PersonInfoPatientId");
                                });

                            b1.OwnsOne("HealthcareManagement.Domain.ValueObjects.Cpf", "Cpf", b2 =>
                                {
                                    b2.Property<Guid>("PersonInfoPatientId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Number")
                                        .IsRequired()
                                        .HasMaxLength(11)
                                        .HasColumnType("nvarchar(11)")
                                        .HasColumnName("Cpf");

                                    b2.HasKey("PersonInfoPatientId");

                                    b2.HasIndex("Number")
                                        .IsUnique()
                                        .HasDatabaseName("IX_Patient_Cpf");

                                    b2.ToTable("Patients");

                                    b2.WithOwner()
                                        .HasForeignKey("PersonInfoPatientId");
                                });

                            b1.OwnsOne("HealthcareManagement.Domain.ValueObjects.Email", "Email", b2 =>
                                {
                                    b2.Property<Guid>("PersonInfoPatientId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Adress")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)")
                                        .HasColumnName("Email");

                                    b2.HasKey("PersonInfoPatientId");

                                    b2.HasIndex("Adress")
                                        .IsUnique()
                                        .HasDatabaseName("IX_Patient_Email");

                                    b2.ToTable("Patients");

                                    b2.WithOwner()
                                        .HasForeignKey("PersonInfoPatientId");
                                });

                            b1.OwnsOne("HealthcareManagement.Domain.ValueObjects.FullName", "FullName", b2 =>
                                {
                                    b2.Property<Guid>("PersonInfoPatientId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("FirstName")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)")
                                        .HasColumnName("FirstName");

                                    b2.Property<string>("LastName")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)")
                                        .HasColumnName("LastName");

                                    b2.HasKey("PersonInfoPatientId");

                                    b2.ToTable("Patients");

                                    b2.WithOwner()
                                        .HasForeignKey("PersonInfoPatientId");
                                });

                            b1.OwnsOne("HealthcareManagement.Domain.ValueObjects.MobilePhoneNumber", "MobilePhoneNumber", b2 =>
                                {
                                    b2.Property<Guid>("PersonInfoPatientId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Number")
                                        .IsRequired()
                                        .HasMaxLength(11)
                                        .HasColumnType("nvarchar(11)")
                                        .HasColumnName("Phone");

                                    b2.HasKey("PersonInfoPatientId");

                                    b2.ToTable("Patients");

                                    b2.WithOwner()
                                        .HasForeignKey("PersonInfoPatientId");
                                });

                            b1.Navigation("BirthDate")
                                .IsRequired();

                            b1.Navigation("Cpf")
                                .IsRequired();

                            b1.Navigation("Email")
                                .IsRequired();

                            b1.Navigation("FullName")
                                .IsRequired();

                            b1.Navigation("MobilePhoneNumber")
                                .IsRequired();
                        });

                    b.Navigation("PersonInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("HealthcareManagement.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("HealthcareManagement.Domain.Entities.Appointment", "Appointment")
                        .WithMany("Prescriptions")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HealthcareManagement.Domain.Entities.Appointment", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HealthcareManagement.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HealthcareManagement.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
